{"version":3,"sources":["index.js"],"names":["endpoint","window","location","protocol","host","console","log","socket","io","connect","StringInput","props","useState","input","setInput","value","onKeyUp","e","keyCode","onSubmit","onChange","target","onClick","App","name","setName","playerNum","setPlayerNum","game","setGame","joining","setJoining","useEffect","getGame","getGameEnd","on","data","player1","Game","leaveGame","emit","game_code","output","gameCode","length","Board","className","board","map","quarter","i","style","transform","rotations","split","row","j","square","k","backgroundColor","onClickSquare","chunkSplit","str","len","match","RegExp","rotateQuarter","rotation","player_num","color","winner","turn","stage","x","index","placePiece","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b164d424.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport io from \"socket.io-client\";\n\nconst ws_scheme = window.location.protocol === \"https:\" ? \"wss://\" : \"ws://\";\nlet endpoint =\n  window.location.host === \"localhost:5000\"\n    ? window.location.host\n    : \"https://spinspot.herokuapp.com/\";\nconsole.log(\"bruh\");\nconsole.log(endpoint);\nlet socket = io.connect(endpoint);\n\nconst StringInput = (props) => {\n  const [input, setInput] = useState(\"\");\n  const onChange = (e) => {\n    setInput(e.target.value);\n  };\n  const onKeyUp = (e) => {\n    if (e.keyCode === 13) {\n      props.onSubmit(input);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        value={input}\n        onKeyUp={(e) => onKeyUp(e)}\n        onChange={(e) => onChange(e)}\n      />\n      <button onClick={() => props.onSubmit(input)}>submit</button>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [name, setName] = useState(\"\");\n  const [playerNum, setPlayerNum] = useState();\n  const [game, setGame] = useState();\n  const [joining, setJoining] = useState(0);\n\n  useEffect(() => {\n    getGame();\n    getGameEnd();\n  }, []);\n\n  const getGame = () => {\n    socket.on(\"game\", (data) => {\n      setGame(data);\n      setJoining(0);\n    });\n  };\n  const getGameEnd = () => {\n    socket.on(\"game_over\", (data) => {\n      setGame();\n    });\n  };\n\n  const joinGame = (gameCode) => {\n    if (gameCode.length === 6) {\n      socket.emit(\"join\", { game_code: gameCode, name: name });\n      setPlayerNum(1);\n    }\n  };\n  const leaveGame = () => {\n    socket.emit(\"leave\", { game_code: game.game_code, name: name });\n    setGame();\n  };\n\n  const createGame = () => {\n    socket.emit(\"create\", { name: name });\n    setPlayerNum(0);\n  };\n\n  if (game) {\n    if (game.player1) {\n      return (\n        <Game\n          data={game}\n          playerNum={playerNum}\n          name={name}\n          leaveGame={leaveGame}\n        />\n      );\n    }\n    return (\n      <div>\n        <h3>Your game code is</h3>\n        <div>{game.game_code}</div>\n      </div>\n    );\n  }\n  if (joining) {\n    return (\n      <div>\n        <h3>enter a code to join a game</h3>\n        <StringInput onSubmit={(output) => joinGame(output)} />\n      </div>\n    );\n  }\n  if (name) {\n    return (\n      <div>\n        <h3>hello {name}!</h3>\n        <p>what would you like to do today?</p>\n        <button onClick={() => createGame()}>\n          <div>create</div>\n          <p>create a new game for your friend to join</p>\n        </button>\n        <button onClick={() => setJoining(1)}>\n          <div>join</div>\n          <p>join an existing game with a game code</p>\n        </button>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <h3>what's your name?</h3>\n        <StringInput onSubmit={(output) => setName(output)} />\n      </div>\n    );\n  }\n};\n\nconst Board = (props) => (\n  <div className=\"board\">\n    {props.board.map((quarter, i) => (\n      <div\n        className=\"board-quarter\"\n        key={i}\n        style={{\n          transform: `rotate(${props.rotations.split(\",\")[i] * 90}deg)`,\n        }}\n      >\n        {quarter.map((row, j) => (\n          <div className=\"board-row\" key={j}>\n            {row.map((square, k) => (\n              <button\n                className=\"board-square\"\n                key={k}\n                style={{\n                  backgroundColor: [\"#efefef\", \"blue\", \"red\"][square],\n                }}\n                onClick={() => props.onClickSquare(i, j, k)}\n              ></button>\n            ))}\n          </div>\n        ))}\n      </div>\n    ))}\n  </div>\n);\n\nconst Game = (props) => {\n  const chunkSplit = (str, len) =>\n    str.match(new RegExp(\".{1,\" + len + \"}\", \"g\"));\n\n  const placePiece = (i, j, k) => {\n    if (\n      props.data.turn === props.playerNum &&\n      props.data.stage === 0 &&\n      props.data.winner === null\n    ) {\n      let index = i * 9 + j * 3 + k;\n      if (props.data.board[index] === \"0\") {\n        socket.emit(\"place\", {\n          game_code: props.data.game_code,\n          index: index,\n          player_num: props.playerNum,\n        });\n      }\n    }\n  };\n  const rotateQuarter = (quarter, rotation) => {\n    socket.emit(\"rotate\", {\n      game_code: props.data.game_code,\n      player_num: props.playerNum,\n      quarter: quarter,\n      rotation: rotation,\n    });\n  };\n\n  return (\n    <div>\n      <button onClick={() => props.leaveGame()}>leave game</button>\n      <h3>\n        playing as{\" \"}\n        <span style={{ color: [\"blue\", \"red\"][props.playerNum] }}>\n          {props.name}\n        </span>\n      </h3>\n      <div>\n        {props.data.winner === null\n          ? props.data.turn === props.playerNum\n            ? props.data.stage\n              ? \"turn a quarter\"\n              : \"place a piece\"\n            : \"opponent's turn\"\n          : props.data.winner === props.playerNum\n          ? \"you won!\"\n          : \"you lost :(\"}\n      </div>\n      {props.data.stage && props.data.turn === props.playerNum ? (\n        <div className=\"controls\">\n          <div className=\"rotate-top-left\">\n            <button onClick={() => rotateQuarter(0, -1)}>{\"<-\"}</button>\n            <button onClick={() => rotateQuarter(0, 1)}>{\"->\"}</button>\n          </div>\n          <div className=\"rotate-top-right\">\n            <button onClick={() => rotateQuarter(1, -1)}>{\"<-\"}</button>\n            <button onClick={() => rotateQuarter(1, 1)}>{\"->\"}</button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"controls\"></div>\n      )}\n      <Board\n        board={chunkSplit(props.data.board, 9).map((quarter) =>\n          chunkSplit(quarter, 3).map((row) => row.split(\"\").map((x) => +x))\n        )}\n        rotations={props.data.rotations}\n        onClickSquare={(i, j, k) => placePiece(i, j, k)}\n      />\n      {props.data.stage && props.data.turn === props.playerNum ? (\n        <div className=\"controls\">\n          <div className=\"rotate-bottom-left\">\n            <button onClick={() => rotateQuarter(2, 1)}>{\"<-\"}</button>\n            <button onClick={() => rotateQuarter(2, -1)}>{\"->\"}</button>\n          </div>\n          <div className=\"rotate-bottom-right\">\n            <button onClick={() => rotateQuarter(3, 1)}>{\"<-\"}</button>\n            <button onClick={() => rotateQuarter(3, -1)}>{\"->\"}</button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"controls\"></div>\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}